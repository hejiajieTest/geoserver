/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. D:\geoserver\src\wcs1_1\target\jjtree\org\geoserver\wcs\kvp\rangesubset\rangeset.jj */
/*@egen*//* Copyright (c) 2001 - 2013 OpenPlans - www.openplans.org. All rights reserved.
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */

/**
 * RangeSet parser definition
 */

options {
  JDK_VERSION = "1.5";
  STATIC = false;                 
  LOOKAHEAD=3;
  FORCE_LA_CHECK=true;                                                                       
}
 
PARSER_BEGIN(RangeSubsetParser) 
package org.geoserver.wcs.kvp.rangesubset;

public class RangeSubsetParser/*@bgen(jjtree)*/implements RangeSubsetParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTRangeSubsetParserState jjtree = new JJTRangeSubsetParserState();

/*@egen*/
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an rangeset expression (wcs 1.1.1 standard):");
    try {
      SimpleNode n = new RangeSubsetParser(System.in).RangeSubset();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(RangeSubsetParser)

/*
The grammar speficied in the WCS 1.1.1 spec is:

RangeSubset = FieldSubset *( \ufffd;\ufffd FieldSubset )
FieldSubset = FieldId [ ":" Interpolation ] [ "[" AxisSubsets "]" ]
AxisSubsets = AxisSubset *( "," AxisSubset )
AxisSubset = AxisId "[" Keys "]"
Keys = Key *( "," Key )
FieldId = <field identifier, as defined in Subclause 9.3.1.3 and Table 17>
AxisId = <axis identifier, as defined in Subclause 9.3.1.3 and Table 18>
Key = <key, as defined in Subclause 9.3.1.3 and Table 19>
Interpolation = <interpolation type identifier, as defined in Table I.7
*/

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* SEPARATORS */
{
  < LP: "[">
| < RP: "]">
| < COMMA: ",">
| < SEMICOLON: ";">
| < COLON: ":">
}
TOKEN : /* IDENTIFIERS: the grammar says at least one char, or any type */
{
  < IDENTIFIER: (~[",",";",":","[","]"])+ >
}


SimpleNode RangeSubset() : {/*@bgen(jjtree) RangeSubset */
  ASTRangeSubset jjtn000 = new ASTRangeSubset(JJTRANGESUBSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RangeSubset */
  try {
/*@egen*/
  FieldSubset() (<SEMICOLON> FieldSubset())* <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FieldSubset() : {/*@bgen(jjtree) FieldSubset */
  ASTFieldSubset jjtn000 = new ASTFieldSubset(JJTFIELDSUBSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldSubset */
  try {
/*@egen*/
  FieldId() (<COLON> Interpolation())? (<LP> AxisSubsets() <RP>)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AxisSubsets()       : {}
{
	AxisSubset() (<COMMA> AxisSubset())*
}

void AxisSubset() : {/*@bgen(jjtree) AxisSubset */
  ASTAxisSubset jjtn000 = new ASTAxisSubset(JJTAXISSUBSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AxisSubset */
        try {
/*@egen*/
	AxisId() <LP> Keys() <RP>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Keys()       : {}
{
	Key() (<COMMA> Key())*
}

void FieldId() : {/*@bgen(jjtree) FieldId */
        ASTFieldId jjtn000 = new ASTFieldId(JJTFIELDID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) FieldId */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{jjtn000.setContent(t.image.trim());}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AxisId() : {/*@bgen(jjtree) AxisId */
        ASTAxisId jjtn000 = new ASTAxisId(JJTAXISID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) AxisId */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{jjtn000.setContent(t.image.trim());}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Interpolation() : {/*@bgen(jjtree) Interpolation */
        ASTInterpolation jjtn000 = new ASTInterpolation(JJTINTERPOLATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Interpolation */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{jjtn000.setContent(t.image.trim());}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Key() : {/*@bgen(jjtree) Key */
        ASTKey jjtn000 = new ASTKey(JJTKEY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Key */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{jjtn000.setContent(t.image.trim());}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
